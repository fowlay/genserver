

DONE: Refactoring: Do not pass an object around. All state is in
instance variables of the callback class.

---------------------

DONE: Architectural change: Do not use the 'init' callback for passing
initial data. Instead let the callback class have constructors that
take the needed initial data.

Keep the init callback still, making it possible to do further
initialization not taken care of in the constructors, and to pass an
ok/ignore status to GenServer. In case of ignore, terminate the
process promptly.

-------------------------------------

DONE: Cleanup: Revise the trace messages.

-------------------------------------

DONE: No transient sender process should be used by the proxy, when
sending towards core.

-------------------------------------

DONE: Maybe let the proxy drop keep-alive responses?

------------------------------------

DONE: When sending responses towards access, trust the Via header? In
that way multiple clients could be served? Also then there is no need
to remember the remote host:port that the request came from (they are
expected to agree, unless there is a NAT between UE and proxy)

-------------------------------------

DONE: Refactoring - major: Use just a single "transport" callback
class on each side, handling all listening and sending. Presumably a
single socket on each side is enough. This design should be way
simpler.

----------------------------------------

DONE: Terminating INVITE fails: The ACK goes to a random port, instead
of the pinpoint port. This is so because the transient sender does not
force the right source port to be used?

(Even if the signaling is wrong, audio streams get set up!!)

Probably it is a dead-end to use multiple sockets on the core
side. One should be enough!!

----------------------------

DONE: Refactoring: Try using SocketAddress instances internally, instead of
host/port combinations. Add a function for creating SocketAddress
easily.

------------------------------------

DONE: Refactoring: Use LinkedList for holding multiple header fields.

-----------------------------------------------

DONE: Add record-routing. This is done in an asymmetric manner: The UE
wants a route set that includes the proxy, but the SP side does NOT
want it - the SP side will always talk to the proxy by default.

RFC 5658 discusses this and related strategies

----------------------------------------

DONE: Test with MicroSIP running on different host. This works; the
settings of MS firewalls may have to be considered.

-------------------------------------

DONE: Refactoring: It is pointless to use List<String> as a type for
multiple header fields, instead use LinkedList<String> everywhere.

-----------------------------------------

DONE: Switch to java.nio, where a UDP listening operation can be
interrupted by another thread; no need for looping on a socket timeout
when there is no traffic.

---------------------------------------

DONE: After unification of the sender/listener functions, consider
using interruptions instead of timeout when a cast or call is to be
handled and the genserver thread is waiting for UDP input.

Using timeouts with the java.net implementation, the timeout has to
be fairly short (like 100 ms), or there will be resends.

----------------------------------

DONE: walk through the classes and use the new "Modes" scheme

Tracing/logging: The message level concept is not so helpful. Instead
declare TRACE_MODES globally as an array of keywords. Each trace call
can then refer to one of the keywords.

------------------------------------------

DONE: ByteBuffer handling: Usage is single-threaded. Start all usage,
in UdpCb, by resetting the buffer; don't do cleanup.

-------------------------------------------

DONE: Tracing of k-a-m messages: Make this its own trace category.

------------------------------------------

DONE: Handling of k-a-m messages: Move the drop decision to the proxy.

-----------------------------------------

DONE: GenServer: Protect the running thread against execptions when
doing callbacks.

-----------------------------------

DONE: GenServer: Should handle the IGNORE result when calling Cb:init().

------------------------------------------

DONE: GenServer: Coding mistake to fix, methods like GenServer.cast
should not pass the GenServer instance as an argument.

------------------------------

DONE: Make the CallBackResult data type specific to the callback:

   InitResult CastResult CallResult InfoResult

A base class can be introduced. Make all of this be inner classes in
GenServer?

-----------------------------------------

DONE: Remove the Interrupter class.

-------------------------------------------

GenServer: Make the "interrupt" action a specifically enabled
feature. This is hardly needed if the cooperative model below is
implemented.

-----------------------------------------

DONE: Remove the Interrupter class.

------------------------------------------

DONE: GenServer: Improve the use of interrupt. Introduce a base class
CallBackBase that all behavior classes have to extend.

The base class holds avolatile variable by which the callback module
can cooperatively indicate that the GenServer process is prepared to
be interrupted. Accessor functions for this variable shall be
provided. Note the need to call Thread.interrupted() when leaving the
interruptable section. Also don't forget that reading from the UDP
socket is not always interrupted; in case of successful reading of a
datagram the indication has to be ceased.

------------------------------------------

DONE: Clear out the java.net based implementation.

-----------------------------------------

DONE: Tracing SIP requests: Drop the SIP/2.0 part

---------------------------------------------

DONE: Registry correction: The registry should be updated only on a 2xx
REGISTER response.

---------------------------------------------

DONE: On de-REGISTER, clear the registry entry. Implies transaction
statefulness.

-----------------------------------------

DONE: Tracing SIP responses: Show code and CSeq method, plus the
free-text part appended

------------------------------------

DONE: GenServer: Process registry: A static ConcurrentHashMap in
GenServer. A "name" variety of the GenServer.start method. Ensure that
processes remove themselves from the map upon termination.

-----------------------------------------

DONE: Eliminate unused field in InternalSipMessage

-----------------------------------------

DONE: Deep clone of InternalSipMessage made before casting from proxy
to other GenServers. Single-threaded HashMap and LinkedList can
therefore be used in the wrapped SipMessage.

---------------------------------

DONE: Blacklisting: Blacklisted patterns, first version

-----------------------------------------

DONE: Cleanup: Get rid of TAB characters. No new TABs should creep in
once VSCode is properly configured.

-----------------------------------------

DONE: Cleanup: The enum "Type" in SipMessage has bad casification

------------------------------------------

DONE: The clone() methods: Make them throw, in case all invocations
happen within a general try-catch.

----------------------------------

DONE: GenServer: The package must not have external dependencies. Add
package-local trace functions.

------------------------------------------

DONE: Present CANCEL processing, originating and terminating

------------------------------------------

DONE: Present "Busy here" processing, originating and terminating: Not
possible to test the originating case, since a call will be set up to
the Comviq answering machine.

------------------------------------------

DONE: Presenter: Driven by events reported by the proxy:
  registration
  de-registration
  notification from SP
  originating call
  terminating call
  blocked call

-----------------------------------------

DONE: Refactored finding of dialog instances.

-----------------------------------------

DONE: Dense numbering of presented calls.

---------------------------------------------------

DONE: Presenter: Display call length.

-----------------------------------------

DONE: Presenter: Garbage collection of Presenter maps, based on
timestamps

---------------------------------

DONE: Blacklisting: Introduce a whitelist too - a whitelist match will
bypass the blacklist check.

------------------------------------------

Consider using log4J

---------------------------------------------------

Write a shell wrapper. No Makefile, just compile
everything? Or use Maven?

------------------------------------------

Consider using Maven build after all, take pattern from gerke-decoder

------------------------------------------

Write a specification, in README.md? How should parameters be entered?
What kind of logging should be produced?

------------------------------------------

Insert license blurb in some source files

-----------------------------------------

GenServer: Should the handleInfo method be renamed, or keep it for
Erlang similarity?

------------------------------------------

Add an Info class that can summarize counters and such, with a telnet
server operator interface (supporting one connection at a time).

------------------------------------------

GenServer: Has the concept been implemented already?

-------------------------------------

Refactoring: Consider pulling the Atom enum into GenServer. Maybe
revise the naming .. use "status" for ok/reply/noreply/stop?

----------------------------------------

A supervisor process could be introduced.

The synchronized startup sequence can be

Start supervisor, supervisor init: start the proxy, start the SP
listener with reference to proxy, SP listener init registers itself
with proxy, start UE listener similarly.

----------------------------------------

Test with Linksys telephone. Be careful about reconfiguring, backup on
paper.

----------------------------------------

The MicroSIP client has configuration options for ports and
"rport". How are they related to proxy configration parameters?

---------------------------------

Blacklisting: Blacklisted patterns from file outside folder

--------------------------------------

Merge to master (main?) branch, accepting VSCode for
development. Clean out Eclipse settings?

--------------------------------------

GenServer: There should be some principle of fault handling.

---------------------------------------

Implementation of GenServer "call": Is there a complication when
several calls are executed in sequence and corresponding results are
to be collected? Maybe not? Or?

-----------------------------------------

Is there a need for trace calls that specify more than one trace mode?

-----------------------------------------



DONE: Refactoring: Do not pass an object around. All state is in instance
variables of the callback class.

---------------------

DONE: Architectural change: Do not use the 'init' callback for passing
initial data. Instead let the callback class have constructors that
take the needed initial data.

Keep the init callback still, making it possible to do further
initialization not taken care of in the constructors, and to pass an
ok/ignore status to GenServer. In case of ignore, terminate the process
promptly.

-------------------------------------

DONE: Cleanup: Revise the trace messages.

-------------------------------------

Refactoring: Consider pulling the Atom enum into GenServer. Maybe revise
the naming .. use "status" for ok/reply/noreply/stop?

-------------------------------------

Refactoring - major: Use just a single "transport" callback class on
each side, handling all listening and sending. Presumably a single
socket on each side is enough. This design should be way simpler.

------------------------------

Make the CallBackResult data type specific to the callback:

   InitResult
   CastResult
   CallResult
   InfoResult

A base class can be introduced. Make all of this be inner classes in
GenServer?

----------------------------------

Process registry: A static HashMap (ConcurrentHashMap?) in
GenServer. A "name" variety of the GenServer.start method. The names
can be strings or enums or Integers, so let the type of the map be
Map<Object, GenServer>

Ensure that processes remove themselves from the map upon termination.

The GenServer.call and .cast methods shall understand how to look up
process by name. Maybe also check validity of the process, throwing
an exception in case of bad shape.

---------------------------------------

Implementation of GenServer "call": Is there a complication when
several calls are executed in sequence and corresponding results are
to be collected? Maybe not? Or?

---------------------------------------

After unification of the sender/listener functions, consider using
interruptions instead of timeout when a cast or call is to be handled
and the genserver thread is waiting for UDP input.

Currently, using timeouts, the timeout has to be fairly short (like
100 ms), or there will be resends.

----------------------------------------

The MicroSIP client has configuration options for ports and
"rport". How are they related to proxy configration parameters?

----------------------------------------

Terminating INVITE fails: The ACK goes to a random port, instead of
the pinpoint port. This is so because the transient sender does not
force the right source port to be used?

(Even if the signaling is wrong, audio streams get set up!!)

Probably it is a dead-end to use multiple sockets on the core
side. One should be enough!
